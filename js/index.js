/*..// –°—Ç–≤–æ—Ä—ñ—Ç—å –∑–º—ñ–Ω–Ω—É str —ñ –¥–∞–π—Ç–µ —ó–π –∑–Ω–∞—á–µ–Ω–Ω—è 'abcde'. –ó–≤–µ—Ä—Ç–∞—é—á–∏—Å—å –¥–æ –æ–∫—Ä–µ–º–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤ —Ü—å–æ–≥–æ —Ä—è–¥–∫–∞,
//–≤–∏–≤–µ–¥—ñ—Ç—å –Ω–∞ –µ–∫—Ä–∞–Ω —Å–∏–º–≤–æ–ª 'a', —Å–∏–º–≤–æ–ª 'b', —Å–∏–º–≤–æ–ª 'e'....*/
/*
const str = "abcde";
alert(str[0]);
alert(str[1]);
alert(str[str.length-1]);
*/

// –ü–µ—Ä–µ—Ä–æ–±—ñ—Ç—å –Ω–∞–≤–µ–¥–µ–Ω–∏–π –∫–æ–¥ —Ç–∞–∫, —â–æ–± —É –Ω—å–æ–º—É –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞–ª–∏—Å—è –æ–ø–µ—Ä–∞—Ü—ñ—ó +=, -=, *=, /=, ++, --.
//–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ä—è–¥–∫—ñ–≤ –∫–æ–¥—É –Ω–µ –ø–æ–≤–∏–Ω–Ω–∞ –∑–º—ñ–Ω–∏—Ç–∏—Å—è. –ö–æ–¥ –¥–ª—è –ø–µ—Ä–µ—Ä–æ–±–∫–∏:
/*
 let num = 1;
 num += 12;
 num -=14;
 num *= 5;
 num /= 7;
 num ++;
 num --;
 */

// –ù–∞–ø–∏—à—ñ—Ç—å —ñ–Ω—Å—Ç—Ä—É–∫—Ü–∏—é, —è–∫–∞ –ø—Ä–∏–π–º–∞—î —Ä—è–¥–æ–∫ —è–∫ –∞—Ä–≥—É–º–µ–Ω—Ç —ñ –ø–µ—Ä–µ—Ç–≤–æ—Ä—é—î —Ä–µ–≥—ñ—Å—Ç—Ä –ø–µ—Ä—à–æ–≥–æ
// —Å–∏–º–≤–æ–ª—É —Ä—è–¥–∫–∞ –∑ –Ω–∏–∂–Ω—å–æ–≥–æ —Ä–µ–≥—ñ—Å—Ç—Ä—É —É –≤–µ—Ä—Ö–Ω—ñ–π.
/*const str = "string not starting with capital";
let firstLetter = str[0].toUpperCase();
console.log(firstLetter);
let result = firstLetter + str.slice(1);
console.log(result);*/
// –í–∏ –ø—Ä–æ—Å–∏—Ç–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤–≤–µ—Å—Ç–∏ —Å—É–º—É –π–æ–≥–æ –∑–∞—Ä–ø–ª–∞—Ç–∏. –ü–æ—Ç—ñ–º —Ä–æ–∑—Ä–∞—Ö–æ–≤—É—î—Ç–µ:

// –î–æ–±–∞–≤–∫—É —É –≤–∏–≥–ª—è–¥—ñ –ø—Ä–µ–º—ñ—ó —É —Å—É–º—ñ 15% –≤—ñ–¥ –∑–∞—Ä–ø–ª–∞—Ç–∏.
// –ü–æ–¥–∞—Ç–∫–∏ —É —Å—É–º—ñ 10% –≤—ñ–¥ —Å—É–º–∏ –≤—Å—ñ—Ö –Ω–∞—Ä–∞—Ö—É–≤–∞–Ω—å (–∑–∞—Ä–ø–ª–∞—Ç–∞ + –ø—Ä–µ–º—ñ—è).
// –í–∏—Ç—Ä–∞—Ç—É –≤ –º–∞–≥–∞–∑–∏–Ω—ñ –≤ —Å—É–º—ñ 190.
// –†–æ–∑–¥—ñ–ª—è—î—Ç–µ —Å—É–º—É, —â–æ –∑–∞–ª–∏—à–∏–ª–∞—Å—è, –º—ñ–∂ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º —ñ –π–æ–≥–æ "–¥—Ä—É–∂–∏–Ω–æ—é"/"—á–æ–ª–æ–≤—ñ–∫–æ–º".

/*let salary = Number(prompt("what is your salary?"));
console.log (typeof salary);
salary*=1.15;
alert("Your salary + bonus = " + salary);
salary*=0.9;
alert ("Afret paying taxex your salary = " + salary);
salary-=190;
alert("Your salary after shopping = " + salary);
salary/=2;
alert("Salary after sharing =" +salary);*/

/*
 * –®–∞–±–ª–æ–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
 * –ù–∞–ø–∏—Å–∞—Ç—å —Ñ—Ä–∞–∑—É —Å –ø–æ–º–æ—â—å—é –∫–æ–Ω–∫–∞—Ç–µ–Ω–∞—Ü–∏–∏ –∏ —à–∞–±–ª–æ–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫
 * "Hello, my name is [name], I'm [age] years old and I like [hobby]", –≥–¥–µ –≤ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö —Å–∫–æ–±–∫–∞—Ö - –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –≤ —Å—Ç—Ä–æ–∫—É
 */

/*const name = 'Dan';
const age = 35;
const hobby = 'swimming';

let string = `Hello, my name is ${name}, I'm ${age} years old and I like 
 ${hobby}`; /* kann ubertragen werden*/
/*console.log(string);
let stringTwo = "Hello, my name is "+name+", I'm "+age+" years old and I like "+hobby;
console.log(stringTwo); /* Kann nicht auf die andere Zeile ubertragen werden */

/* –ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç, —è–∫–∏–π –≤–∏–≤–æ–¥–∏—Ç—å –≤ –∫–æ–Ω—Å–æ–ª—å –∑–∞–æ–∫—Ä—É–≥–ª–µ–Ω—ñ –≤–≥–æ—Ä—É / –≤–Ω–∏–∑ —ñ —Ç.–¥. –∑–Ω–∞—á–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–æ—ó
 value. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –º–µ—Ç–æ–¥–∏ Math.floor(), Math.ceil() —ñ Math.round(). –ü–µ—Ä–µ–≤—ñ—Ä —â–æ –±—É–¥–µ –≤ 
 –∫–æ–Ω—Å–æ–ª—ñ –ø—Ä–∏ –∑–Ω–∞—á–µ–Ω–Ω—è—Ö 27.3 —Ç–∞ 27.9.
*/

/*const value = 27.4;
console.log(Math.floor(value));
console.log(Math.ceil(value));
console.log(Math.round(value));*/

// –ü—ñ–¥—Ä–∞—Ö—É–π—Ç–µ —Å—É–º—É —á–∏—Å–µ–ª —É –¥—ñ–∞–ø–∞–∑–æ–Ω—ñ –≤—ñ–¥ 1 –¥–æ 10 –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é —Ü–∏–∫–ª—É
// for, while —Ç–∞ do...while.
// –ü—ñ–¥–∫–∞–∑–∫–∞: —É —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ –º–∞—î –≤–∏–π—Ç–∏ 55.

/*let result = 0;
for ( let i = 0; i <= 10; i++) {
  result +=i;
}
console.log(result);*/

/*let result = 0;
let i = 0;
while (i <= 10) {
  result += i;
  i += 1;
}
console.log(result);*/

/*let result = 0;
let i = 0;
do {
  result += i;
  i += 1;
} while (i <= 10);
console.log(result);*/

//–ù–∞–ø–∏—à—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é change_register(str), —è–∫–∞ –ø—Ä–∏–π–º–∞—î —è–∫ –∞—Ä–≥—É–º–µ–Ω—Ç —Ä—è–¥–æ–∫ —ñ –∑–∞–º—ñ–Ω—é—î —Ä–µ–≥—ñ—Å—Ç—Ä
//–∫–æ–∂–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª—É –Ω–∞ –ø—Ä–æ—Ç–∏–ª–µ–∂–Ω–∏–π. –ù–∞–ø—Ä–∏–∫–ª–∞–¥, —è–∫—â–æ –≤–≤–æ–¥–∏—Ç—å—Å—è "–ö–æ–ñ–Ω–ò–π –ú–∏–°–ª–ò–≤–ï—Ü–¨ –±–ê–∂–ê—î –ó–Ω–ê—Ç–ò"

/*const str = "–ö–æ–ñ–Ω–ò–π –ú–∏–°–ª–ò–≤–ï—Ü–¨ –±–ê–∂–ê—î –ó–Ω–ê—Ç–ò";

function change_register(str) {
  let result = "";
  for (let letter of str) {
    if (letter === letter.toUpperCase()) {
      result += letter.toLowerCase();
    } else {
      result += letter.toUpperCase();
    }

    /*console.log(letter);
  }
  return result;
}
console.log(change_register(str));*/

/*
 * –ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç, —è–∫–∏–π –≤–∏–≤–æ–¥–∏—Ç—å —É –∫–æ–Ω—Å–æ–ª—å —Ä—è–¥–æ–∫ "–¶–µ –ø–æ–∑–∏—Ç–∏–≤–Ω–µ —á–∏—Å–ª–æ", —è–∫—â–æ –≤ 
prompt –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–≤—ñ–≤ —á–∏—Å–ª–æ –±—ñ–ª—å—à–µ –∑–∞ –Ω—É–ª—å. –Ø–∫—â–æ –±—É–ª–æ –≤–≤–µ–¥–µ–Ω–æ –Ω—É–ª—å, –≤–∏–≤–æ–¥—å 
—É –∫–æ–Ω—Å–æ–ª—å —Ä—è–¥–æ–∫ "–¶–µ –Ω—É–ª—å". –Ø–∫—â–æ –ø–µ—Ä–µ–¥–∞–ª–∏ –≤—ñ–¥'—î–º–Ω–µ —á–∏—Å–ª–æ, —É –∫–æ–Ω—Å–æ–ª—ñ –º–∞—î –±—É—Ç–∏ 
—Ä—è–¥–æ–∫ "–¶–µ –≤—ñ–¥'—î–º–Ω–µ —á–∏—Å–ª–æ".
 */
/*const userInput = Number(prompt("–í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ", 0));

if (userInput === 0) {
  console.log("–¶–µ –Ω—É–ª—å");
} else if (userInput > 0) {
  console.log("–¶–µ –ø–æ–∑–∏—Ç–∏–≤–Ω–µ —á–∏—Å–ª–æ");
} else {
  console.log("–¶–µ –≤—ñ–¥'—î–º–Ω–µ —á–∏—Å–ª–æ");
}*/
/*


 * –ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç, —è–∫–∏–π –ø–æ—Ä—ñ–≤–Ω—é—î —á–∏—Å–ª–∞ –∑–º—ñ–Ω–Ω–∏—Ö a —ñ b. –Ø–∫—â–æ –æ–±–∏–¥–≤–∞ –∑–Ω–∞—á–µ–Ω–Ω—è 
–±—ñ–ª—å—à–µ 100, –≤–∏–≤–µ–¥–∏ –≤ –∫–æ–Ω—Å–æ–ª—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–µ –∑ –Ω–∏—Ö. –Ü–Ω–∞–∫—à–µ —É –∫–æ–Ω—Å–æ–ª—ñ –º–∞—î –±—É—Ç–∏ —Å—É–º–∞ 
–∑–Ω–∞—á–µ–Ω–Ω—è b —Ç–∞ —á–∏—Å–ª–∞ 512.
 */

/*const a = 190;
const b = 50;

let result = 0;
if (a > 100 && b > 100) {
  if (a > b) {
    result = a;
  } else result = b;
} else result = b + 512;

console.log(result);*/

/*
 * –ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç —è–∫–∏–π –ø–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ –∑–∞–∫—ñ–Ω—á—É—î—Ç—å—Å—è –∑–Ω–∞—á–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–æ—ó link —Å–∏–º–≤–æ–ª–æ–º /. –Ø–∫—â–æ –Ω—ñ, –¥–æ–¥–∞–π
 –¥–æ –∫—ñ–Ω—Ü—è –∑–Ω–∞—á–µ–Ω–Ω—è link —Ü–µ–π —Å–∏–º–≤–æ–ª. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—é if...else.
 */

/*let link = "https://my-site.com/about";

if (link[link.length - 1] !== "/") {
  link += "/";
}
console.log(link);*/

/*
 * –ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —á–∞—Å—É –¥–µ–¥–ª–∞–π–Ω—É –∑–¥–∞—á—ñ –ø—Ä–æ–µ–∫—Ç—É. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—é if...else.
 * –Ø–∫—â–æ –¥–æ –¥–µ–¥–ª–∞–π–Ω—É 0 –¥–Ω—ñ–≤ - –≤–∏–≤–µ–¥–∏ —Ä—è–¥–æ–∫ "–°—å–æ–≥–æ–¥–Ω—ñ"
 * –Ø–∫—â–æ –¥–æ –¥–µ–¥–ª–∞–π–Ω—É 1 –¥–µ–Ω—å - –≤–∏–≤–µ–¥–∏ —Ä—è–¥–æ–∫ "–ó–∞–≤—Ç—Ä–∞"
 * –Ø–∫—â–æ –¥–æ –¥–µ–¥–ª–∞–π–Ω—É 2 –¥–Ω—ñ - –≤–∏–≤–µ–¥–∏ —Ä—è–¥–æ–∫ "–ü—ñ—Å–ª—è–∑–∞–≤—Ç—Ä–∞"
 * –Ø–∫—â–æ –¥–æ –¥–µ–¥–ª–∞–π–Ω—É 3+ –¥–Ω—ñ–≤ - –≤–∏–≤–µ–¥–∏ —Ä—è–¥–æ–∫ "–î–∞—Ç–∞ –≤ –º–∞–π–±—É—Ç–Ω—å–æ–º—É"
 */

/*const daysUntilDeadline = 1;
let message;

/*if (daysUntilDeadline === 0) {
  message = "–°—å–æ–≥–æ–¥–Ω—ñ";
} else if (daysUntilDeadline === 1) {
  message = "–ó–∞–≤—Ç—Ä–∞";
} else if (daysUntilDeadline === 2) {
  message = "–ü—ñ—Å–ª—è–∑–∞–≤—Ç—Ä–∞";
} else message = "–î–∞—Ç–∞ –≤ –º–∞–π–±—É—Ç–Ω—å–æ–º—É";
console.log(message);

switch (daysUntilDeadline) {
  case 0:
    message = "–°—å–æ–≥–æ–¥–Ω—ñ";
    break;
  case 1:
    message = "–ó–∞–≤—Ç—Ä–∞";
    break;
  case 2:
    message = "–ü—ñ—Å–ª—è–∑–∞–≤—Ç—Ä–∞";
    break;
  default:
    message = "–î–∞—Ç–∞ –≤ –º–∞–π–±—É—Ç–Ω—å–æ–º—É";
  
}
console.log(message);*/

/*
 * –ù–∞–ø–∏—à–∏ —Ü–∏–∫–ª for —è–∫–∏–π –≤–∏–≤–æ–¥–∏—Ç—å —É –∫–æ–Ω—Å–æ–ª—å –±—Ä–∞—É–∑–µ—Ä–∞
 —á–∏—Å–ª–∞ –∑–∞ –∑—Ä–æ—Å—Ç–∞–Ω–Ω—è–º –≤—ñ–¥ min –¥–æ max, –∞–ª–µ —è–∫—â–æ —á–∏—Å–ª–æ –∫—Ä–∞—Ç–Ω–µ 5.
 */

/*const min = 10;
const max = 100;

for (let i = min; i <= max; i++) {
  if (i % 5 === 0) {
    console.log(i);
  }
}*/
/*
 * –°—Ç–≤–æ—Ä—ñ—Ç—å –º–∞—Å–∏–≤ genres –∑ –µ–ª–µ–º–µ–Ω—Ç–∞–º–∏ Jazz —ñ Blues. ‚úÖ
 * –î–æ–¥–∞–π—Ç–µ "–†–æ–∫-–Ω-—Ä–æ–ª" –≤ –∫—ñ–Ω–µ—Ü—å. ‚úÖ
 * –í–∏–≤–µ–¥—ñ—Ç—å —É –∫–æ–Ω—Å–æ–ª—å –ø–µ—Ä—à–∏–π –µ–ª–µ–º–µ–Ω—Ç –º–∞—Å–∏–≤—É. ‚úÖ
 * –í–∏–≤–µ–¥—ñ—Ç—å —É –∫–æ–Ω—Å–æ–ª—å –æ—Å—Ç–∞–Ω–Ω—ñ–π –µ–ª–µ–º–µ–Ω—Ç –º–∞—Å–∏–≤—É. –ö–æ–¥ –º–∞—î –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –¥–ª—è –º–∞—Å–∏–≤—É –¥–æ–≤—ñ–ª—å–Ω–æ—ó –¥–æ–≤–∂–∏–Ω–∏. ‚úÖ
 * –í–∏–¥–∞–ª—ñ—Ç—å –ø–µ—Ä—à–∏–π –µ–ª–µ–º–µ–Ω—Ç —ñ –≤–∏–≤–µ–¥—ñ—Ç—å –π–æ–≥–æ –≤ –∫–æ–Ω—Å–æ–ª—å.  ‚úÖ
 * –í—Å—Ç–∞–≤—Ç–µ ¬´Country¬ª —Ç–∞ ¬´Raggy¬ª –Ω–∞ –ø–æ—á–∞—Ç–æ–∫ –º–∞—Å–∏–≤—É.  ‚úÖ
 */

/*const genres = ["Jazz", "Blues"];
console.log(genres);

/*const genres = Array("Jazz", "Blues");
console.log(genres);
genres.push("Rock-and-Roll");
console.log(genres[0]);

console.log(genres[genres.length - 1]);

console.log(genres.at(-1));

const element = genres.shift();
console.log(element);
genres.unshift("Country", "Raggy");
console.log(genres);*/

/*
 * –ù–∞–ø–∏—à—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é copyArr(arr), —è–∫–∞ –∫–æ–ø—ñ—é—î –º–∞—Å–∏–≤, –Ω–µ –∑–º—ñ–Ω—é—é—á–∏ –æ—Ä–∏–≥—ñ–Ω–∞–ª.
 */

/*const clients = ["Mango", "Ajax", "Poly", "Kiwi"];

function copyArr(arr) {
  return [...arr];
}

function copyArr(arr) {
  return arr.slice();
}

function copyArr(arr) {
  return arr.concat([]);
}

const client2 = copyArr(clients);
console.log(client2);
console.log(clients === client2);*/

/*let clients = ["Mango", "Ajax", "Poly", "Kiwi"];
//clients = [];
clients.length = 0;

console.log(clients);*/

/*
 * –ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø–µ—Ä–µ–±–æ—Ä—É –º–∞—Å–∏–≤—É fruits —Ü–∏–∫–ª–æ–º for. –î–ª—è –∫–æ–∂–Ω–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞ –º–∞—Å–∏–≤—É
 –≤–∏–≤–µ–¥—ñ—Ç—å —É –∫–æ–Ω—Å–æ–ª—å —Ä—è–¥–æ–∫ —É —Ñ–æ—Ä–º–∞—Ç—ñ –Ω–æ–º–µ—Ä_–µ–ª–µ–º–µ–Ω—Ç–∞: –∑–Ω–∞—á–µ–Ω–Ω—è_–µ–ª–µ–º–µ–Ω—Ç–∞. –ù—É–º–µ—Ä–∞—Ü—ñ—è –µ–ª–µ–º–µ–Ω—Ç—ñ–≤
  –º–∞—î –ø–æ—á–∏–Ω–∞—Ç–∏—Å—è –∑ –ø–µ—Ä—à–æ–≥–æ.
 */

/*const fruits = ["üçé", "üçá", "üçë", "üçå", "üçã", "üÜò", "‚ìÇÔ∏è"];

for (let i = 0; i < fruits.length; i += 1) {
  console.log(`${i + 1}) ${fruits[i]}`);
}*/

//–ù–∞–ø–∏—à—ñ—Ç—å –∫–æ–¥, —è–∫–∏–π –ø–µ—Ä–µ—Ç–≤–æ—Ä—é—î —Ç–∞ –ø–æ—î–¥–Ω—É—î –≤—Å—ñ –µ–ª–µ–º–µ–Ω—Ç–∏ –º–∞—Å–∏–≤—É –≤ –æ–¥–Ω–µ —Ä—è–¥–∫–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è. –ï–ª–µ–º–µ–Ω—Ç–∏
//–º–∞—Å–∏–≤—É –±—É–¥—É—Ç—å —Ä–æ–∑–¥—ñ–ª–µ–Ω—ñ –∫–æ–º–æ—é. –û—Ç—Ä–∏–º–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–≤–æ–º–∞ —Ä—ñ–∑–Ω–∏–º–∏ –º–µ—Ç–æ–¥–∞–º–∏.

/* vegetables = ["–ö–∞–ø—É—Å—Ç–∞", "–†—ñ–ø–∞", "–†–µ–¥–∏—Å–∫–∞", "–ú–æ—Ä–∫–≤–∞"];

//console.log(vegetables.join(",")); (First var);

let result = "";
for (let vegetable of vegetables) {
  result += vegetable + ",";
}
console.log(result);

console.log(result.slice(0, -1));*/

//–ù–∞–ø–∏—à—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é removeDuplicates(arr), —è–∫–∞ –ø–æ–≤–µ—Ä—Ç–∞—î –º–∞—Å–∏–≤, —É —è–∫–æ–º—É –≤–∏–¥–∞–ª–µ–Ω—ñ –ø–æ–≤—Ç–æ—Ä—é–≤–∞–Ω—ñ
//–µ–ª–µ–º–µ–Ω—Ç–∏ –∑ –º–∞—Å–∏–≤—É arr (—ñ–≥–Ω–æ—Ä—É–π—Ç–µ —á—É—Ç–ª–∏–≤—ñ—Å—Ç—å –¥–æ —Ä–µ–≥—ñ—Å—Ç—Ä—É).

/*var arr = [
  "php",
  "php",
  "css",
  "css",
  "script",
  "script",
  "html",
  "html",
  "java",
];*/

/*function removeDuplicates(arr) {
  let newArr = [];
  for (let element of arr) {
    if (!newArr.includes(element)) {
      newArr.push(element);
    }
  }
  return newArr;
}*/

/*console.log(removeDuplicates(arr)); // [php,css,script,html,java]

function removeDuplicates(arr) {
  return [...new Set(arr)];
}*/

/*
 * –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü—ñ—é min(a,b), —è–∫–∞ –ø–æ–≤–µ—Ä—Ç–∞—î –Ω–∞–π–º–µ–Ω—à–µ –∑ —á–∏—Å–µ–ª a —Ç–∞ b.
 
console.log(min(5, 10, 14, 1, 5));
console.log(min(2, 0, 1, 5));*/

/*function min(...args) {
  let num = args[0];
  for (let element of args) {
    if (element < num) {
      num = element;
    }
  }
  return num;
}

/*function min(...args) {
  // console.log(...args);
  return Math.min(...args);
}*/

/*
 * –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü—ñ—é getRectArea(dimensions) –¥–ª—è –æ–±—á–∏—Å–ª–µ–Ω–Ω—è –ø–ª–æ—â—ñ –ø—Ä—è–º–æ–∫—É—Ç–Ω–∏–∫–∞ –∑—ñ —Å—Ç–æ—Ä–æ–Ω–∞–º–∏, –∑–Ω–∞—á–µ–Ω–Ω—è 
—è–∫–∏—Ö –±—É–¥—É—Ç—å –ø–µ—Ä–µ–¥–∞–Ω—ñ –¥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ dimensions —É –≤–∏–≥–ª—è–¥—ñ —Ä—è–¥–∫–∞. –ó–Ω–∞—á–µ–Ω–Ω—è –≥–∞—Ä–∞–Ω—Ç–æ–≤–∞–Ω–æ 
—Ä–æ–∑–¥—ñ–ª–µ–Ω—ñ –ø—Ä–æ–±—ñ–ª–æ–º.
 */
/*
 * –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü—ñ—é logItems(items), —è–∫–∞ –æ—Ç—Ä–∏–º—É—î –º–∞—Å–∏–≤ —ñ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î —Ü–∏–∫–ª for, —è–∫–∏–π –¥–ª—è 
–∫–æ–∂–Ω–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞ –º–∞—Å–∏–≤—É –≤–∏–≤–æ–¥–∏—Ç–∏–º–µ –≤ –∫–æ–Ω—Å–æ–ª—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É —Ñ–æ—Ä–º–∞—Ç—ñ <–Ω–æ–º–µ—Ä –µ–ª–µ–º–µ–Ω—Ç–∞> - <–∑–Ω–∞—á–µ–Ω–Ω—è 
–µ–ª–µ–º–µ–Ω—Ç–∞>. –ù—É–º–µ—Ä–∞—Ü—ñ—è –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –º–∞—î –ø–æ—á–∏–Ω–∞—Ç–∏—Å—è –∑ –ø–µ—Ä—à–æ–≥–æ.
* –ù–∞–ø—Ä–∏–∫–ª–∞–¥, –¥–ª—è –ø–µ—Ä—à–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞ –º–∞—Å–∏–≤—É ['Mango', 'Poly', 'Ajax'] –∑ —ñ–Ω–¥–µ–∫—Å–æ–º 0 –±—É–¥–µ
 –≤–∏–≤–µ–¥–µ–Ω–æ 1 - Mango, –∞ –¥–ª—è —ñ–Ω–¥–µ–∫—Å—É 2 –≤–∏–≤–µ–¥–µ 3 - Ajax.
 */

/*function logItems(array = []) {
  //   const arr = array || [];
  for (let i = 0; i < array.length; i++) {
    const element = array[i];
    console.log(`${i + 1}) ${element}`);
  }
}*/

/*function logItems(array = []) {
  array.forEach((element, index) => {
    console.log(`${index + 1}) ${element}`);
  });
}

logItems(["Mango", "Poly", "Ajax"]);
logItems(["üçé", "üçá", "üçë", "üçå", "üçã"]);*/

/* –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü—ñ—é findLargestNumber(numbers)—è–∫–∞ —à—É–∫–∞—î –Ω–∞–π–±—ñ–ª—å—à–µ —á–∏—Å–ª–æ –≤ –º–∞—Å–∏–≤—ñ.
 */

/*function findLargestNumber(numbers) {
  //return Math.max(...numbers);
  let number = numbers[0];
  for (let element of numbers) {
    if (element > number) {
      number = element;
    }
  }
  return number;
}
console.log(findLargestNumber([2, 17, 94, 1, 23, 37])); // 94
console.log(findLargestNumber([49, 4, 7, 83, 12])); // 83*/

// –ù–∞–ø–∏—à—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é filterFalse(arr), —è–∫–∞ –æ—á–∏—â–∞—î –º–∞—Å–∏–≤ –≤—ñ–¥ —Ö–∏–±–Ω–∏—Ö (false) –∑–Ω–∞—á–µ–Ω—å: false,
//null, undefined, 0, ‚Äì0, NaN —Ç–∞ "" (–ø—É—Å—Ç–∏–π —Ä—è–¥–æ–∫).

/*const array = [NaN, 0, 77, false, -17, "", undefined, 99, null];
function filterFalse(arr) {
  return arr.filter((value) => Boolean(value));
}*/

/*const array = [NaN, 0, 77, false, -17, "", undefined, 99, null];
function filterFalse(arr) {
  return arr.filter((value) => !!value);
}*/

//console.log(filterFalse(array)); // [ 77, -17, 99 ]

/*const array = [NaN, 0, 77, false, -17, "", undefined, 99, null];
function filterFalse(arr) {
  return arr.filter((value) => value);
}
console.log(filterFalse(array)); // [ 77, -17, 99 ]*/

//–ü–µ—Ä–µ–¥ –≤–∞–º–∏ –∑–º—ñ–Ω–Ω–∞, —â–æ –º—ñ—Å—Ç–∏—Ç—å —Ä—è–¥–æ–∫. –ù–∞–ø–∏—à—ñ—Ç—å –∫–æ–¥, —è–∫–∏–π —Å—Ç–≤–æ—Ä—é—î –º–∞—Å–∏–≤, —è–∫–∏–π
//—Å–∫–ª–∞–¥–∞—Ç–∏–º–µ—Ç—å—Å—è –∑ –ø–µ—Ä—à–∏—Ö –ª—ñ—Ç–µ—Ä —Å–ª—ñ–≤ —Ä—è–¥–∫–∞ str.

/*const str = "–ö–∞–∂–¥—ã–π –æ—Ö–æ—Ç–Ω–∏–∫ –∂–µ–ª–∞–µ—Ç –∑–Ω–∞—Ç—å, –≥–¥–µ —Å–∏–¥–∏—Ç —Ñ–∞–∑–∞–Ω.";

console.log(str.split(" "));
const words = str.split(" ");
const array = words.map((element) => element[0]);
console.log(array); // [–ö,–æ,–∂,–∑,–≥,—Å,—Ñ]*/

/*class Client {
  #login;
  #email;
  constructor(login, email) {
    this.#login = login;
    this.#email = email;
  }
  get client() {
    return {
      login: this.#login,
      email: this.#email,
    };
  }
  set login(newLogin) {
    this.#login = newLogin;
  }
  set email(newEmail) {
    this.#email = newEmail;
  }
}
const firstClient = new Client("Dog", "dog@mail");
console.log(firstClient.client);
firstClient.email = "cat@mail.com";
console.log(firstClient.client);*/

/*class Calculator {
  constructor() {
    this.number = 0;
  }
  get resultCalc() {
    return this.number;
  }
  addCalc(number) {
    return (this.number += number);
  }

  substruct(number) {
    return (this.number -= number);
  }
  divide(number) {
    if (number !== 0) {
      return (this.number /= number);
    }
  }
  multiply(number) {
    return (this.number *= number);
  }
}
const calc = new Calculator();
console.log(calc.addCalc(5));
console.log(calc.addCalc(10));
console.log(calc.substruct(7));

calc.addCalc(5);
calc.addCalc(10);
calc.substruct(7);
calc.multiply();
calc.divide(2)*/

/*[
  {
    name: "Moore Hensley",
    email: "moorehensley@indexia.com",
    eyeColor: "blue",
    friends: ["Sharron Pace"],
    isActive: false,
    balance: 2811,
    gender: "male",
  },
  {
    name: "Sharlene Bush",
    email: "sharlenebush@tubesys.com",
    eyeColor: "blue",
    friends: ["Briana Decker", "Sharron Pace"],
    isActive: true,
    balance: 3821,
    gender: "female",
  },
  {
    name: "Ross Vazquez",
    email: "rossvazquez@xinware.com",
    eyeColor: "green",
    friends: ["Marilyn Mcintosh", "Padilla Garrison", "Naomi Buckner"],
    isActive: false,
    balance: 3793,
    gender: "male",
  },
  {
    name: "Elma Head",
    email: "elmahead@omatom.com",
    eyeColor: "green",
    friends: ["Goldie Gentry", "Aisha Tran"],
    isActive: true,
    balance: 2278,
    gender: "female",
  },
  {
    name: "Carey Barr",
    email: "careybarr@nurali.com",
    eyeColor: "blue",
    friends: ["Jordan Sampson", "Eddie Strong"],
    isActive: true,
    balance: 3951,
    gender: "male",
  },
  {
    name: "Blackburn Dotson",
    email: "blackburndotson@furnigeer.com",
    eyeColor: "brown",
    friends: ["Jacklyn Lucas", "Linda Chapman"],
    isActive: false,
    balance: 1498,
    gender: "male",
  },
  {
    name: "Sheree Anthony",
    email: "shereeanthony@kog.com",
    eyeColor: "brown",
    friends: ["Goldie Gentry", "Briana Decker"],
    isActive: true,
    balance: 2764,
    gender: "female",
  },
];

const sortByName = (users) => {
  return [...users].sort((a, b) => a.name.localeCompare(b));
};*/

// –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü—ñ—é –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä Storage, —è–∫–∏–π —Å—Ç–≤–æ—Ä—é—î –æ–±'—î–∫—Ç–∏
//–î–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Å–∫–ª–∞–¥–æ–º —Ç–æ–≤–∞—Ä—ñ–≤.
//–ü—Ä–∏ –≤–∏–∫–ª–∏–∫—É –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏–º–µ –æ–¥–∏–Ω –∞–≥—Ä—É–º–µ–Ω—Ç - –ø–æ—á–∞—Ç–∫–æ–≤–∏–π –º–∞—Å–∏–≤ —Ç–æ–≤–∞—Ä—ñ–≤,
//—ñ –∑–∞–ø–∏—Å—É–≤–∞—Ç–∏ —ó—Ö —É –≤–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—å items.
//–î–æ–¥–∞–π –º–µ—Ç–æ–¥–∏ –∫–ª–∞—Å—É:
//getItems() - –ø–æ–≤–µ—Ä—Ç–∞–π—Ç–µ –º–∞—Å–∏–≤ —Ç–æ–≤–∞—Ä—ñ–≤
//addItems(item) - –æ—Ç—Ä–∏–º—É—î –Ω–æ–≤–∏–π —Ç–æ–≤–∞—Ä —Ç–∞ –¥–æ–¥–∞—î –π–æ–≥–æ –¥–æ –ø–æ—Ç–æ—á–Ω–∏—Ö
//removeItem(item) - –æ—Ç—Ä–∏–º—É—î —Ç–æ–≤–∞—Ä —ñ, —è–∫—â–æ –≤—ñ–Ω —î, –≤–∏–¥–∞–ª—è—î –π–æ–≥–æ –∑ –ø–æ—Ç–æ—á–Ω–∏—Ö
//++++++++++++++++++++++++++++++++++++++++++

/*const Storage = function (items) {
  this.items = items;
};

Storage.prototype.getItems = function () {
  return this.items;
};
Storage.prototype.addItems = function (item) {
  this.items.push(item);
};
Storage.prototype.removeItem = function (item) {
  this.items = this.items.filter((product) => product !== item);
};*/

/*class Storage {
  constructor(items) {
    this.items = items;
  }
  getItems() {
    return this.items;
  }
  addItems(item) {
    this.items.push(item);
  }
  removeItem(item) {
    this.items = this.items.filter((product) => product !== item);
  }
}

const storage = new Storage(["apple", "mango"]);
console.log(storage.getItems());
storage.addItems("banana");
storage.removeItem("apple");
console.log(storage.getItems());*/

/*class User {
  email;

  constructor(email) {
    this.email = email;
  }

  get email() {
    return this.email;
  }
  set email(newEmail) {
    this.email = newEmail;
  }
}

class Admin extends User {
  blacklistedEmails = [];
  static AccessLevel = {
    BASIC: "basic",
    SUPERUSER: "superuser",
  };

  constructor({ email, accessLevel }) {
    super(email);
    this.accessLevel = accessLevel;
  }
  blacklist(email) {
    this.blacklistedEmails.push(email);
  }
  isBlacklisted(email) {
    return this.blacklistedEmails.includes(email);
  }
}
const mango = new Admin({
  email: "mango@mail.com",
  accessLevel: Admin.AccessLevel.SUPERUSER,
});

console.log(mango.email); // "mango@mail.com"
console.log(mango.accessLevel); // "superuser"

mango.blacklist("poly@mail.com");
console.log(mango.blacklistedEmails); // ["poly@mail.com"]
console.log(mango.isBlacklisted("mango@mail.com")); // false
console.log(mango.isBlacklisted("poly@mail.com")); // true*/

// 1) –û—Ç—Ä–∏–º–∞–π –∑ –º–∞—Å–∏–≤—É –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é reduce –º—ñ–Ω—ñ–º–∞–ª—å–Ω–µ —á–∏—Å–ª–æ (-9)
// 2) –û—Ç—Ä–∏–º–∞–π –∑ –º–∞—Å–∏–≤—É –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é reduce –º–∞–∫—Å–∏–º–∞–ª—å–Ω–µ —á–∏—Å–ª–æ (18)

/*const numbers = [-9, 18, 6, 5];

const min = numbers.reduce((acc, element) => (element < acc ? element : acc));
console.log(min);

const max = numbers.reduce((acc, element) => (element > acc ? element : acc));
console.log(max);*/

//3 –ó–Ω–∞—Ö–æ–¥–∏–º–æ —Å—É–º—É –µ–ª–µ–º–µ–Ω—Ç—ñ–≤: (36)
/*const nums = [1, 2, 3, 4, 5, 6, 7, 8];

const total = nums.reduce((acc, element) => acc + element, 0);
console.log(total);*/

//4 –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π –æ–±'—î–∫—Ç –∑ ID —Ç–∞ —ñ–º'—è–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: // { '1': 'John', '2': 'Anna', '3': 'Kate' }
/*const users = [
  { id: "1", name: "John" },
  { id: "2", name: "Anna" },
  { id: "3", name: "Kate" },
];

const userObj = users.reduce((acc, element) => {
  acc[element.id] = element.name;
  return acc;
}, {});
console.log(userObj);*/
